Android
=======

check out Maven Android Plugin (http://code.google.com/p/maven-android-plugin/wiki/GettingStarted)

Pitch:

  - easy to use API, modeled after the WS JS API
  - uses anonymous inner class for event handler to match Android event handler idiom
  - integrates with Android UI application / tailored to (event loop integration)
  - passes all Autobahn WS test suite test cases (strict)

WebSockets
==========

  - SSL support

Options
=======

Add options, configurable at run-time from command line flags, or on Protocol derived
class in connectionMade():

Masking

   maskServerFrames (false)
   acceptMaskedServerFrames (false)
   applyMask (true)

Close Handling

   failConnectionWithClose (false)

Automatic Pings

Automatic Fragmentation

Frame/Message Size Limits


Test Suite
==========

Allow to specify case exclusion patterns.

Rotate agent labels in report 90° counterclock => css

Test Cases

  - make NON-STRICT more green
  - add notice at top of report overview, explaining diff. beetween PASS, NON-STRICT and FAIL
  - test UTF-8 non-chars : EF BF [BE-BF] or F[0-7] [89AB]F BF [BE-BF] (any codepoint whose low 16 bits are 0xFFFE or 0xFFFF ??)
  - add new case variant of 6.4.2: the middle frame is large (64k)
  - split out 6.4.3 to a new test section: "Implementation Limits" => see how behaves
  - UTF-8 fail fast: differentiate 4 behaviors
      1. only when complete message was received
      2. only when complete frame was received
      3. only when complete octets for encoded integer was received
      4. as soon as invalid octet is received

   Currently, there are tests to distinguish between 1., 2. and 4.
   So for completeness, there need to be tests to differentiate between 3. and 4.

  - allow "fail connection" = "immediate TCP close" OR "WS close handshake"
  - Opening/Closing Handshake
  - Server-to-Client Masking
  - Message Roundtrip Time / Latency
  - JSON roundtripping tests

Test Report

  - Timestamps in Wirelog


Python
======

WebSocket Protocol

  - allow FIN = true on beginMessageFrame instead of endMessage

  - Further optimize masking: http://stackoverflow.com/questions/2119761/simple-python-challenge-fastest-bitwise-xor-on-data-buffers

  - check NumPy for masking
    https://github.com/kanaka/websockify/blob/6e263063c2b63642a0e17cb91d6b9f6c9365c0c0/websocket.py#L293
